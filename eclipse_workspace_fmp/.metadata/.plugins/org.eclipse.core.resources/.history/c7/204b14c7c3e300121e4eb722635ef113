package Shop;

import java.util.LinkedList;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;

public class ListaProduse {

//	private Queue<Produs> lista = new LinkedList<Produs>();
	private Object lock = new Object();
	private BlockingQueue<Produs> lista;
	boolean done = false;
	
	public void check(boolean dn) {
		done = dn;
	}


	public void addToListaProdus(Produs prod) {

			lista.add(prod);
			System.out.println("Produs added");
			lock.notify();

	}

	public Produs getProdus() throws InterruptedException {

			if (lista.isEmpty()){
				if(done) {
				ThreadConsumator.interrupted();
				}
				lock.wait();
			}
			System.out.println("Produs taken");
			return lista.poll();
	}
	
	
	
/*	public void addToListaProdus(Produs prod) {
		synchronized (lock) {
			lista.add(prod);
			System.out.println("Produs added");
			lock.notify();
		}

	}

	public Produs getProdus() throws InterruptedException {
		synchronized (lock) {
			if (lista.isEmpty()){
				if(done) {
				ThreadConsumator.interrupted();
				}
				lock.wait();
			}
			System.out.println("Produs taken");
			return lista.poll();
		}
	}
*/
	
	
}
